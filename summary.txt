Telemetry data is, definitionally, data that is collected remotely and automatically. That said, I see Jaeger almost like a debugger, since it lets us monitor different services running across different software components. Functionally (at surface value) it is also similar to Burp or other proxy interceptors, since we can see traffic. 

Looking into the specific logs, we first see a timeline of the services and how long each one took. These can be further inspected to show method destinations, parameters, headers, etc. It also gives us the basic information for the tracer, including name, version, port, IP.

We can first break down what the traces tell us. They are made up of individual spans, each of which is a single operation. When combined, these traces show us the flow of traffic through the application. The metrics give us quantitative data about the application, for example latency, how many spans gave us errors, etc. In our example, the GET request took 3.42 milliseconds, or the majority of the entire request. Setting the database took less than 2 milliseconds, and the rest of the spans took less than 1 millisecond total. 

Finally, the logs represent the entirety of what we are viewing. From my understanding, logs (as a loose term) are the highest on the hierarchy and consist of individual traces. In our jaeger-query item, we see an option for tags and processes. The first gives us the component and status code and http.url. The process section tells us the name of the associated process to the span, the IP address, and basic information about Jaeger.  
